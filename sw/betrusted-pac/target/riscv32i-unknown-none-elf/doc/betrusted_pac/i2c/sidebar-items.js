initSidebarItems({"mod":[["command",""],["control",""],["ev_enable",""],["ev_pending",""],["ev_status",""],["prescale0","Bits 0-7 of `I2C_PRESCALE`."],["prescale1","Bits 8-15 of `I2C_PRESCALE`. Prescaler value. Set to (module clock / (5 * I2C freq) - 1). Example: if module clock is equal to sysclk; syclk is 100MHz; and I2C freq is 100kHz, then prescaler is (100MHz / (5 * 100kHz) - 1) = 199. Reset value: 0xFFFF"],["rxr","Data being read from slaved devices"],["status",""],["txr","Next byte to transmit to slave devices. LSB indicates R/W during address phases, `1` for reading from slaves, `0` for writing to slaves"]],"struct":[["RegisterBlock","Register block"]],"type":[["COMMAND","This register you can `read`, `reset`, `write`, `write_with_zero`, `modify`. See API."],["CONTROL","This register you can `read`, `reset`, `write`, `write_with_zero`, `modify`. See API."],["EV_ENABLE","This register you can `read`, `reset`, `write`, `write_with_zero`, `modify`. See API."],["EV_PENDING","This register you can `read`, `reset`, `write`, `write_with_zero`, `modify`. See API."],["EV_STATUS","This register you can `read`, `reset`, `write`, `write_with_zero`, `modify`. See API."],["PRESCALE0","Bits 0-7 of `I2C_PRESCALE`."],["PRESCALE1","Bits 8-15 of `I2C_PRESCALE`. Prescaler value. Set to (module clock / (5 * I2C freq) - 1). Example: if module clock is equal to sysclk; syclk is 100MHz; and I2C freq is 100kHz, then prescaler is (100MHz / (5 * 100kHz) - 1) = 199. Reset value: 0xFFFF"],["RXR","Data being read from slaved devices"],["STATUS","This register you can `read`, `reset`, `write`, `write_with_zero`, `modify`. See API."],["TXR","Next byte to transmit to slave devices. LSB indicates R/W during address phases, `1` for reading from slaves, `0` for writing to slaves"]]});